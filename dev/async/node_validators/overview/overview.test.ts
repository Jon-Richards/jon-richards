/**
 * @fileoverview
 * Contains unit tests for the Overview node validator.
 */

import { OverviewValidator, OverviewResponseData } from './overview';
import { mockProjectResponseData } from '../project/project.test';
import { mockToolResponseData } from '../tool/tool.test';
import { mockResponseNodes } from '../../../lib/test/mock_response_nodes';

type Project = OverviewResponseData['projects'][0];
type Tool = OverviewResponseData['tools'][0];

/**
 * Mocks an OverviewResponseData type.
 * @param projects An optional array of OverviewResponseData projects.  These
 * will be used in place of the projects generated by default.
 * @param tools An optional array of OverviewResponseData tools.  These will be
 * used in place of the tools generated by default.
 * @return A mocked OverviewResponseData type.
 */
export function mockOverviewResponse(
  projects: Project[] = mockResponseNodes(mockProjectResponseData),
  tools: Tool[] = mockResponseNodes(mockToolResponseData)
): OverviewResponseData {
  return {projects, tools};
}

describe('The OverviewValidator class.', () => {
  it('Stores valid OverviewResponse data.', () => {
    const v = new OverviewValidator(mockOverviewResponse());
    expect(v.getErrors().size).toBe(0);
  });

  it('Registers an error when a duplicate project is found.', () => {
    const project = mockProjectResponseData();
    const projects = [project, project];
    const data = mockOverviewResponse(projects);
    const validator = new OverviewValidator(data);
    expect(validator.getErrors().size).toBe(1);
  });

  it('Registers an error when a duplicate tool is found.', () => {
    const tool = mockToolResponseData();
    const tools = [tool, tool];
    const data = mockOverviewResponse(undefined, tools);
    const validator = new OverviewValidator(data);
    expect(validator.getErrors().size).toBe(1);
  });

  it('Registers separate errors for separate fields.', () => {
    const project = mockProjectResponseData();
    const projects = [project, project, project];
    const tool = mockToolResponseData();
    const tools = [tool, tool, tool];
    const data = mockOverviewResponse(projects, tools);
    const validator = new OverviewValidator(data);
    expect(validator.getErrors().size).toBe(2);
  });

  it('Discards projects with errors.', () => {
    const projectWithError = mockProjectResponseData({
      id: 'banana' as unknown as number
    });
    const projects = [
      mockProjectResponseData(),
      projectWithError
    ];
    const data = mockOverviewResponse(projects);
    const validator = new OverviewValidator(data);
    expect(validator.data.projects.length).toBe(1);
  });

  it('Discards tools with errors.', () => {
    const toolWithError = mockToolResponseData({
      id: 'banana' as unknown as number
    });
    const tools = [
      mockToolResponseData(),
      toolWithError
    ];
    const data = mockOverviewResponse(undefined, tools);
    const validator = new OverviewValidator(data);
    expect(validator.data.tools.length).toBe(1);
  });
});