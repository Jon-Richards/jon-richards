/**
 * These reflect the grid's
 * default settings, they can
 * all be overridden as needed.
 */
 $grid-settings: (
  /** Used as a global prefix for all generated classes. */
  namespace: 'grid',

  /** The maximum width for the layout. */
  max-width: 1200px,

  /** The maimim number of columns used in the layout. */
  columns: 12,

  /** The total width of the gutter between columns. */
  gutter: 20px,
  
  /**
   * Breakpoints appear as media queries in the generated CSS.
   * The string values are used in naming the of the
   * generated classes.  The number of breakpoints is
   * dynamic, should start from 0 and increase in size with
   * each breakpoint entry.
   */
  breakpoints: (
    ('xs', 0px), // (start with 0)
    ('sm', 375px),
    ('md', 768px),
    ('lg', 1200px)
  )
) !default;


/**
 * Generates base classes and standardizes box sizing. 
 */
@mixin grid-base() {
  $NS: map-get($grid-settings, namespace);

  html {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
  }

  *, *:before, *:after {
    -webkit-box-sizing: inherit;
    -moz-box-sizing: inherit;
    box-sizing: inherit;
  }

  /**
  * Flex container element.
  */
  .#{$NS}-container {
    display: block;
    width: 100%;
    max-width: map-get($grid-settings, max-width);
    margin-left:auto;
    margin-right:auto;
  }

  /** 
  * Fluid containers have no max-width and will scale to fit
  * their parent element.
  */
  .#{$NS}-container-fluid {
    @extend .#{$NS}-container;
    max-width: none;
    margin-left: 0;
    margin-right: 0;
  }

  .#{$NS}-row {
    display: -webkit-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;

    -ms-flex-direction: row;
    -webkit-flex-direction: row;
    flex-direction: row;
    
    -webkit-flex-wrap: wrap;
    flex-wrap: wrap;
    
    -webkit-align-items: flex-start;
    align-items: flex-start;

    -webkit-align-content: flex-start;
    align-content: flex-start;
  }
}


/** 
* Creates a column class and its corresponding helper classes.
* (Using separate else if cases generates classes that minify
* more easily.)
*/
@mixin grid-column ($prefix, $i:0, $total:0, $mode:'create') {
  $NS: map-get($grid-settings, namespace);

  @if $mode == 'create' {
    .#{$NS}-#{$prefix}-#{$i} {
      display: block;
      position: relative;
      top: 0px;
      left: 0px;
      margin: 0px;
      padding-left: map-get($grid-settings, gutter) / 2;
      padding-right: map-get($grid-settings, gutter) / 2;
      width: percentage((1 / $total) * $i);
    }
  } @else if $mode == 'hide' { // hides column at breakpoint
    .#{$NS}-#{$prefix}-hide {
      display: none;
    }
  } @else if $mode == 'show' { // shows column at breakpoint
    .#{$NS}-#{$prefix}-show {
      display: block;
    }
  } @else if $mode == 'flush' { // removes gutter starting at breakpoint
    .#{$NS}-#{$prefix}-flush {
      padding-left: 0;
      padding-right: 0;
    }
  } @else if $mode == 'gutter' { // adds gutter starting at breakpoint
    .#{$NS}-#{$prefix}-gutter {
      padding-left: map-get($grid-settings, gutter) / 2;
      padding-right: map-get($grid-settings, gutter) / 2;
    }
  } @else if $mode == 'text-left' { // text-align: left for this breakpoint
    .#{$NS}-#{$prefix}-text-left {
      text-align: left;
    }
  } @else if $mode == 'text-right' { // text-align: right for this breakpoint
    .#{$NS}-#{$prefix}-text-right {
      text-align: right;
    }
  } @else if $mode == 'text-center' { // text-align: center for this breakpoint
    .#{$NS}-#{$prefix}-text-center {
      text-align: center;
    }
  } @else if $mode == 'align-start' { // flex align-self: start for this breakpoint
    .#{$NS}-#{$prefix}-align-start {
      -ms-flex-item-align: start;
      -ms-grid-row-align: start;
      align-self: start;
    }
  } @else if $mode == 'align-end' { // flext align-self: end for this breakpoint
    .#{$NS}-#{$prefix}-align-end {
      -ms-flex-item-align: end;
      -ms-grid-row-align: end;
      align-self: end;
    }
  } @else if $mode == 'align-center' { // flex align-self: center for this breakpoint
    .#{$NS}-#{$prefix}-align-center {
      -ms-flex-item-align: center;
      -ms-grid-row-align: center;
      align-self: center;
    }
  } @else if $mode == 'align-baseline' { // flex align-self: baseline for this breakpoint
    .#{$NS}-#{$prefix}-align-baseline {
      -ms-flex-item-align: baseline;
      align-self: baseline;
    }
  } @else if $mode == 'align-stretch' { // flex align-self: stretch for this breakpoint
    .#{$NS}-#{$prefix}-align-stretch {
      -ms-flex-item-align: stretch;
      -ms-grid-row-align: stretch;
      align-self: stretch;
    }
  } @else if $mode == 'justify-start' { // flex justify-content: start for this breakpoint
    .#{$NS}-#{$prefix}-justify-start {
      -webkit-box-pack: start;
      -ms-flex-pack: start;
      justify-content: flex-start;
    }
  } @else if $mode == 'justify-end' { // flex justify-content: end for this breakpoint
    .#{$NS}-#{$prefix}-justify-end {
      -webkit-box-pack: end;
      -ms-flex-pack: end;
      justify-content: flex-end;
    }
  } @else if $mode == 'justify-center' { // flex justify-content: center for this breakpoint
    .#{$NS}-#{$prefix}-justify-center {
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center;
    }
  } @else if $mode == 'justify-between' { // flex justify-content: space-between for this breakpoint
    .#{$NS}-#{$prefix}-justify-between {
      -webkit-box-pack: justify;
      -ms-flex-pack: justify;
      justify-content: space-between;
    }
  } @else if $mode == 'justify-around' { // flex justify-content: space-around for this breakpoint
    .#{$NS}-#{$prefix}-justify-around {
      -ms-flex-pack: distribute;
      justify-content: space-around;
    }
  } @else if $mode == 'justify-evenly' { // flex justify-content: space-evenly for this breakpoint
    .#{$NS}-#{$prefix}-justify-evenly {
      -webkit-box-pack: space-evenly;
      -ms-flex-pack: space-evenly;
      justify-content: space-evenly;
    }
  } @else if $mode == 'order' { // changes the column's order by a given number
    .#{$NS}-#{$prefix}-order-#{$i} {
      -webkit-box-ordinal-group: $i + 1;
      -ms-flex-order: $i;
      order: $i;
    }
  } @else if $mode == 'grow' { // grows the column by a given number
    .#{$NS}-#{$prefix}-grow-#{$i} {
      -webkit-box-flex: $i;
      -ms-flex-positive: $i;
      flex-grow: $i;
    }
  } @else if $mode == 'shrink' { // changes the column's order
    .#{$NS}-#{$prefix}-shrink-#{$i} {
      -ms-flex-negative: $i;
      flex-shrink: $i;
    }
  }
}


/** 
*  Uses $grid-settings to generate the column classes 
*  and helpers for each breakpoint.
*/
@mixin grid-generate () {
  @include grid-base();

  @each $prefix, $val in map-get($grid-settings, breakpoints) {
    @media (min-width: $val) {
      @for $i from 1 through map-get($grid-settings, columns) {
        @include grid-column($prefix, $i, map-get($grid-settings, columns));
      }
      @for $i from 0 through map-get($grid-settings, columns) {
        @include grid-column($prefix, $i, map-get($grid-settings, columns), 'order');
      }
      @for $i from 1 through map-get($grid-settings, columns) {
        @include grid-column($prefix, $i, map-get($grid-settings, columns), 'grow');
      }
      @for $i from 1 through map-get($grid-settings, columns) {
        @include grid-column($prefix, $i, map-get($grid-settings, columns), 'shrink');
      }

      
      // Only generates one class per breakpoint
      @include grid-column($prefix, null, null, 'hide');
      @include grid-column($prefix, null, null, 'show');
      @include grid-column($prefix, null, null, 'flush');
      @include grid-column($prefix, null, null, 'gutter');
      @include grid-column($prefix, null, null, 'text-left');
      @include grid-column($prefix, null, null, 'text-right');
      @include grid-column($prefix, null, null, 'text-center');
      @include grid-column($prefix, null, null, 'align-start');
      @include grid-column($prefix, null, null, 'align-end');
      @include grid-column($prefix, null, null, 'align-center');
      @include grid-column($prefix, null, null, 'align-baseline');
      @include grid-column($prefix, null, null, 'align-stretch');
      @include grid-column($prefix, null, null, 'justify-start');
      @include grid-column($prefix, null, null, 'justify-end');
      @include grid-column($prefix, null, null, 'justify-center');
      @include grid-column($prefix, null, null, 'justify-between');
      @include grid-column($prefix, null, null, 'justify-around');
      @include grid-column($prefix, null, null, 'justify-evenly');
    }
  }
}